name: cd-frontend-workflow

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'
  pull_request:
    branches: 
      - main
    paths:
      - 'starter/frontend/**'
    types: [closed]
env:
  GITHUB_SHA: ${{ github.sha }}
jobs:
  build-test:
    runs-on: ubuntu-latest

    strategy: 
      matrix:
        node-version: [16.x, 18.x]

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Install the dependencies.
      - name: Install the dependencies
        run: cd starter/frontend && npm ci

      # Run the test.
      - name: Run test
        run: cd starter/frontend && npm run test
      # Run build
      - name: Run build
        run: cd starter/frontend && npm run build --if-present
  deploy:
    needs: build-test
    environment:
      name: staging
    runs-on: ubuntu-latest
    steps:
    # Check out the code from the repository.
      - uses: actions/checkout@v3
      # deploy
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Get ECR login password
        id: ecr-login
        run: |
          echo "::set-output name=password::$(aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }})"

      # - name: Login to container registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
      #     username: ${{ secrets.REGISTRY_USERNAME }}
      #     password: ${{ steps.ecr-login.outputs.password }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./starter/frontend/Dockerfile
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/frontend:${{env.GITHUB_SHA}}
          build-args: |
            REACT_APP_MOVIE_API_URL=${{ env.BACKEND_SERVICE_URL }}
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Verify kubectl version
        run: kubectl version --client

      - name: Install kustomize
        run: |
          wget -O /tmp/kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.4.0/kustomize_v4.4.0_linux_amd64.tar.gz
          tar xzf /tmp/kustomize.tar.gz -C /tmp
          sudo mv /tmp/kustomize /usr/local/bin/kustomize
          sudo chmod +x /usr/local/bin/kustomize
          kustomize version
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name your-cluster-name --region your-region

      - name: Deploy to Kubernetes
        run: |
          cd starter/frontend/k8s
          # aws eks update-kubeconfig --name your-cluster-name --region your-region
          kustomize edit set image frontend=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/frontend:${{env.GITHUB_SHA}}
          kustomize build | kubectl apply --validate=false --openapi-patch=false -f -
        
      - name: Get Service URL
        id: get-service-url
        run: |
          SERVICE_URL=$(kubectl get service -l app=backend -o=jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
          echo "::set-output name=service_url::$SERVICE_URL"
        continue-on-error: true

      - name: Output Service URL
        if: steps.get-service-url.outputs.service_url != ''
        run: echo "Service URL ${{ steps.get-service-url.outputs.service_url }}" >> $GITHUB_ENV